gitops-runtime:
  # gitops-operator:
    # argoCdNotifications:
    #   resources:
    #     limits:
    #       cpu: 500m
    #       memory: 128Mi
    #     requests:
    #       cpu: 100m
    #       memory: 64Mi

  #   image:
  #     tag: cr-23913-27ce074
  #     pullPolicy: IfNotPresent

  #app-proxy:
  #  image:
  #    repository: quay.io/codefresh/cap-app-proxy
  #    tag: 1.2841.0
  #    pullPolicy: IfNotPresent

  argo-cd:
    acrController:
      enabled: true
    notifications:
      enabled: true
      # bots:
      #   slack: {}
      notifiers:
        service.slack: |
          token: $slack-token
        service.channels: ["laurent.rochette@octopus.com"]
      triggers:
        trigger.outofsync: |
          - description: Application color is out of sync.
            when: app.name == "color-dev" and app.status.sync.status == "OutOfSync" and app.status.operationState.phase in ['Succeeded']
            oncePer: app.status.operationState.operation.sync.changeRevision
            send:
            - outofsync
      templates:
        template.outofsync: |
          message: |
            Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}.
            Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          slack:
            attachments: |
              [{
                "title": "{{.app.metadata.name}}",
                "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                "color": "#18be52",
                "fields": [{
                  "title": "Sync Status",
                  "value": "{{.app.status.sync.status}}",
                  "short": true
                }, {
                  "title": "Repository",
                  "value": "{{.app.spec.source.repoURL}}",
                  "short": true
                }]
              }]
            deliveryPolicy: Post
            groupingKey: ''
            notifyBroadcast: false

    eventReporter:
      # enabled: true
      # version: v2
      replicas: 4
      # image:
        # tag: v2.8-2023.12.13-3973ffbbd
      env:
        - name: USE_GRPC
          value: 'false'
    server:
      replicas: 2
      resources:
        requests:
          cpu: '0.3'
          memory: 400Mi

  argo-workflows:
    controller:
      workflowDefaults:
        spec:
          serviceAccountName: workflows-default
    useDefaultArtifactRepo: true
    useStaticCredentials: false
    artifactRepository:
      archiveLogs: true
      s3:
        accessKeySecret: {}
        secretKeySecret: {}
        bucket: aperturedevops
        endpoint: s3.amazonaws.com
        insecure: false
        region: us-east-1
        roleARN: arn:aws:iam::336151728602:role/codefresh_s3
    server:
      serviceAccount:
        annotations:
          eks.amazonaws.com/role-arn: arn:aws:iam::336151728602:role/argo-workflows-kubecon-dev
    workflow:
      serviceAccount:
        create: true
        name: workflows-default
        annotations:
          eks.amazonaws.com/role-arn: arn:aws:iam::336151728602:role/argo-workflows-kubecon-dev

  global:
    codefresh:
      accountId: 641dfab29939b208915c0d4e
      userToken:
        secretKeyRef:
          name: codefresh-user-token
          key: token
    runtime:
      ingress:
        enabled: false
      name: gitops
      isConfigurationRuntime: true

  installer:
    skipValidation: true

  garage-workflows-artifact-storage:
    enabled: false
