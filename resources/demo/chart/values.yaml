gitops-runtime:
  cf-argocd-extras:
    enabled: true
  argo-rollouts:
    enabled: false
  argo-cd:
    configs:
      params:
        reposerver.parallelism.limit: 5
        applicationsetcontroller.enable.github.api.metrics: "true"
      cm:
        timeout.reconciliation: 120s
        timeout.reconciliation.jitter: 60s
        application.resourceTrackingMethod: "annotation+label"
    acrController:
      enabled: true
    eventReporter:
      env:
        - name: USE_GRPC
          value: 'false'
      replicas: 4
    server:
      metrics: &metric_block
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: "monitoring"
          additionalLabels:
            release: prometheus-stack-low
      replicas: 2
      resources:
        requests:
          cpu: '0.3'
          memory: 400Mi
    applicationSet:
      metrics: *metric_block
    commitServer:
      metrics: *metric_block
    notifications:
      enabled: true
      logLevel: "debug"
      cm:
        create: true
        name: argocd-notifications-cm
      secret:
        create: false
      metrics: *metric_block
      notifiers:
        service.grafana: |
          apiURL: https://grafana-low.cs.sandbox.codefresh.io/api
          apiKey: $grafana-api-key
        service.teams: |
          recipientUrls:
            channelName: $channel-teams-url
        service.slack: |
          token: $slack-token
      triggers:
        trigger.on-sync-succeeded: |
          - description: Application syncing has succeeded
            oncePer: app.status.operationState?.syncResult?.revision
            when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
            send:
            - on-sync-succeeded
      templates:
        template.on-sync-succeeded: |
          message: "{{.app.metadata.name}} synced"

    redis:
      metrics: *metric_block
    controller:
      metrics: *metric_block
    repoServer:
      env:
        - name: ARGOCD_EXEC_TIMEOUT
          value: "5m"
      metrics: *metric_block
  global:
    codefresh:
      accountId: 641dfab29939b208915c0d4e
      userToken:
        secretKeyRef:
          name: codefresh-user-token
          key: token
    runtime:
      ingress:
        className: nginx-public
        enabled: false
      isConfigurationRuntime: true
      name: demo
  installer:
    skipValidation: true

  argo-workflows:
    controller:
      workflowDefaults:
        spec:
          archiveLogs: true
          artifactRepositoryRef:
            configMap: codefresh-workflows-log-store
            key: codefresh-workflows-log-store
    artifactRepositoryRef:
      codefresh-workflows-log-store:
        archiveLogs: true
        codefresh-workflows-log-store:
          s3:
            bucket: 641dfab29939b208915c0d4e
            endpoint: gitops-workflow-logs.codefresh.io
            insecure: false
            keyFormat: 'demo/{{workflow.name}}/{{pod.name}}'
            accessKeySecret:
              name: codefresh-token
              key: token
            secretKeySecret:
              name: codefresh-token
              key: token
